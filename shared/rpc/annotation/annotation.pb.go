// Code generated by protoc-gen-go. DO NOT EDIT.
// source: annotation.proto

/*
Package annotation is a generated protocol buffer package.

It is generated from these files:
	annotation.proto

It has these top-level messages:
	BatchAnnotateImagesRequest
	AnnotateImageRequest
	Image
	ImageSource
	ImageFeature
	BatchAnnotateImagesResponse
	AnnotateImageResponse
	ImageFeatureVector
	ItemAnnotation
	CategoryAnnotation
	ColorAnnotation
	IsFashionAnnotation
	HasFaceAnnotation
	TextureAnnotation
	BoundingBox
	BatchAnnotateTextsRequest
	AnnotateTextRequest
	TextFeature
	BatchAnnotateTextsResponse
	AnnotateTextResponse
	EntityAnnotation
	PriceRangeAnnotation
	RangeAnnotation
	EntityRelation
	Status
*/
package annotation

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ImageFeature_Type int32

const (
	ImageFeature_TYPE_UNSPECIFIED      ImageFeature_Type = 0
	ImageFeature_FEATURE_VECTOR        ImageFeature_Type = 1
	ImageFeature_ITEM_DETECTION        ImageFeature_Type = 2
	ImageFeature_CATEGORY_PREDICTION   ImageFeature_Type = 3
	ImageFeature_COLOR_DETECTION       ImageFeature_Type = 4
	ImageFeature_IS_FASHION_PREDICTION ImageFeature_Type = 5
	ImageFeature_HAS_FACE_PREDICTION   ImageFeature_Type = 6
	ImageFeature_TEXTURE_PREDICTION    ImageFeature_Type = 7
)

var ImageFeature_Type_name = map[int32]string{
	0: "TYPE_UNSPECIFIED",
	1: "FEATURE_VECTOR",
	2: "ITEM_DETECTION",
	3: "CATEGORY_PREDICTION",
	4: "COLOR_DETECTION",
	5: "IS_FASHION_PREDICTION",
	6: "HAS_FACE_PREDICTION",
	7: "TEXTURE_PREDICTION",
}
var ImageFeature_Type_value = map[string]int32{
	"TYPE_UNSPECIFIED":      0,
	"FEATURE_VECTOR":        1,
	"ITEM_DETECTION":        2,
	"CATEGORY_PREDICTION":   3,
	"COLOR_DETECTION":       4,
	"IS_FASHION_PREDICTION": 5,
	"HAS_FACE_PREDICTION":   6,
	"TEXTURE_PREDICTION":    7,
}

func (x ImageFeature_Type) String() string {
	return proto.EnumName(ImageFeature_Type_name, int32(x))
}
func (ImageFeature_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 0} }

type TextFeature_Type int32

const (
	TextFeature_TYPE_UNSPECIFIED      TextFeature_Type = 0
	TextFeature_ENTITY_PREDICTION     TextFeature_Type = 1
	TextFeature_ENTITY_RELATIONS      TextFeature_Type = 2
	TextFeature_PRICE_RANGE_DETECTION TextFeature_Type = 3
)

var TextFeature_Type_name = map[int32]string{
	0: "TYPE_UNSPECIFIED",
	1: "ENTITY_PREDICTION",
	2: "ENTITY_RELATIONS",
	3: "PRICE_RANGE_DETECTION",
}
var TextFeature_Type_value = map[string]int32{
	"TYPE_UNSPECIFIED":      0,
	"ENTITY_PREDICTION":     1,
	"ENTITY_RELATIONS":      2,
	"PRICE_RANGE_DETECTION": 3,
}

func (x TextFeature_Type) String() string {
	return proto.EnumName(TextFeature_Type_name, int32(x))
}
func (TextFeature_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{17, 0} }

type RangeAnnotation_RangeOperator int32

const (
	RangeAnnotation_OP_UNSPECIFIED RangeAnnotation_RangeOperator = 0
	RangeAnnotation_GTE            RangeAnnotation_RangeOperator = 1
	RangeAnnotation_LTE            RangeAnnotation_RangeOperator = 2
	RangeAnnotation_EQ             RangeAnnotation_RangeOperator = 3
)

var RangeAnnotation_RangeOperator_name = map[int32]string{
	0: "OP_UNSPECIFIED",
	1: "GTE",
	2: "LTE",
	3: "EQ",
}
var RangeAnnotation_RangeOperator_value = map[string]int32{
	"OP_UNSPECIFIED": 0,
	"GTE":            1,
	"LTE":            2,
	"EQ":             3,
}

func (x RangeAnnotation_RangeOperator) String() string {
	return proto.EnumName(RangeAnnotation_RangeOperator_name, int32(x))
}
func (RangeAnnotation_RangeOperator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{22, 0}
}

type BatchAnnotateImagesRequest struct {
	Requests []*AnnotateImageRequest `protobuf:"bytes,1,rep,name=requests" json:"requests,omitempty"`
}

func (m *BatchAnnotateImagesRequest) Reset()                    { *m = BatchAnnotateImagesRequest{} }
func (m *BatchAnnotateImagesRequest) String() string            { return proto.CompactTextString(m) }
func (*BatchAnnotateImagesRequest) ProtoMessage()               {}
func (*BatchAnnotateImagesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BatchAnnotateImagesRequest) GetRequests() []*AnnotateImageRequest {
	if m != nil {
		return m.Requests
	}
	return nil
}

type AnnotateImageRequest struct {
	Image    *Image          `protobuf:"bytes,1,opt,name=image" json:"image,omitempty"`
	Features []*ImageFeature `protobuf:"bytes,2,rep,name=features" json:"features,omitempty"`
}

func (m *AnnotateImageRequest) Reset()                    { *m = AnnotateImageRequest{} }
func (m *AnnotateImageRequest) String() string            { return proto.CompactTextString(m) }
func (*AnnotateImageRequest) ProtoMessage()               {}
func (*AnnotateImageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AnnotateImageRequest) GetImage() *Image {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *AnnotateImageRequest) GetFeatures() []*ImageFeature {
	if m != nil {
		return m.Features
	}
	return nil
}

type Image struct {
	Content []byte       `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Source  *ImageSource `protobuf:"bytes,2,opt,name=source" json:"source,omitempty"`
}

func (m *Image) Reset()                    { *m = Image{} }
func (m *Image) String() string            { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()               {}
func (*Image) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Image) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Image) GetSource() *ImageSource {
	if m != nil {
		return m.Source
	}
	return nil
}

type ImageSource struct {
	ImageUrl string `protobuf:"bytes,1,opt,name=image_url,json=imageUrl" json:"image_url,omitempty"`
}

func (m *ImageSource) Reset()                    { *m = ImageSource{} }
func (m *ImageSource) String() string            { return proto.CompactTextString(m) }
func (*ImageSource) ProtoMessage()               {}
func (*ImageSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ImageSource) GetImageUrl() string {
	if m != nil {
		return m.ImageUrl
	}
	return ""
}

type ImageFeature struct {
	Type       ImageFeature_Type `protobuf:"varint,1,opt,name=type,enum=annotation.ImageFeature_Type" json:"type,omitempty"`
	MaxResults int32             `protobuf:"varint,2,opt,name=max_results,json=maxResults" json:"max_results,omitempty"`
}

func (m *ImageFeature) Reset()                    { *m = ImageFeature{} }
func (m *ImageFeature) String() string            { return proto.CompactTextString(m) }
func (*ImageFeature) ProtoMessage()               {}
func (*ImageFeature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ImageFeature) GetType() ImageFeature_Type {
	if m != nil {
		return m.Type
	}
	return ImageFeature_TYPE_UNSPECIFIED
}

func (m *ImageFeature) GetMaxResults() int32 {
	if m != nil {
		return m.MaxResults
	}
	return 0
}

type BatchAnnotateImagesResponse struct {
	Responses []*AnnotateImageResponse `protobuf:"bytes,1,rep,name=responses" json:"responses,omitempty"`
}

func (m *BatchAnnotateImagesResponse) Reset()                    { *m = BatchAnnotateImagesResponse{} }
func (m *BatchAnnotateImagesResponse) String() string            { return proto.CompactTextString(m) }
func (*BatchAnnotateImagesResponse) ProtoMessage()               {}
func (*BatchAnnotateImagesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *BatchAnnotateImagesResponse) GetResponses() []*AnnotateImageResponse {
	if m != nil {
		return m.Responses
	}
	return nil
}

type AnnotateImageResponse struct {
	FeatureVector       *ImageFeatureVector   `protobuf:"bytes,1,opt,name=feature_vector,json=featureVector" json:"feature_vector,omitempty"`
	ItemAnnotations     []*ItemAnnotation     `protobuf:"bytes,2,rep,name=item_annotations,json=itemAnnotations" json:"item_annotations,omitempty"`
	CategoryAnnotations []*CategoryAnnotation `protobuf:"bytes,3,rep,name=category_annotations,json=categoryAnnotations" json:"category_annotations,omitempty"`
	ColorAnnotations    []*ColorAnnotation    `protobuf:"bytes,4,rep,name=color_annotations,json=colorAnnotations" json:"color_annotations,omitempty"`
	IsFashionAnnotation *IsFashionAnnotation  `protobuf:"bytes,5,opt,name=is_fashion_annotation,json=isFashionAnnotation" json:"is_fashion_annotation,omitempty"`
	HasFaceAnnotation   *HasFaceAnnotation    `protobuf:"bytes,6,opt,name=has_face_annotation,json=hasFaceAnnotation" json:"has_face_annotation,omitempty"`
	TextureAnnotations  []*TextureAnnotation  `protobuf:"bytes,7,rep,name=texture_annotations,json=textureAnnotations" json:"texture_annotations,omitempty"`
	Error               *Status               `protobuf:"bytes,8,opt,name=error" json:"error,omitempty"`
}

func (m *AnnotateImageResponse) Reset()                    { *m = AnnotateImageResponse{} }
func (m *AnnotateImageResponse) String() string            { return proto.CompactTextString(m) }
func (*AnnotateImageResponse) ProtoMessage()               {}
func (*AnnotateImageResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *AnnotateImageResponse) GetFeatureVector() *ImageFeatureVector {
	if m != nil {
		return m.FeatureVector
	}
	return nil
}

func (m *AnnotateImageResponse) GetItemAnnotations() []*ItemAnnotation {
	if m != nil {
		return m.ItemAnnotations
	}
	return nil
}

func (m *AnnotateImageResponse) GetCategoryAnnotations() []*CategoryAnnotation {
	if m != nil {
		return m.CategoryAnnotations
	}
	return nil
}

func (m *AnnotateImageResponse) GetColorAnnotations() []*ColorAnnotation {
	if m != nil {
		return m.ColorAnnotations
	}
	return nil
}

func (m *AnnotateImageResponse) GetIsFashionAnnotation() *IsFashionAnnotation {
	if m != nil {
		return m.IsFashionAnnotation
	}
	return nil
}

func (m *AnnotateImageResponse) GetHasFaceAnnotation() *HasFaceAnnotation {
	if m != nil {
		return m.HasFaceAnnotation
	}
	return nil
}

func (m *AnnotateImageResponse) GetTextureAnnotations() []*TextureAnnotation {
	if m != nil {
		return m.TextureAnnotations
	}
	return nil
}

func (m *AnnotateImageResponse) GetError() *Status {
	if m != nil {
		return m.Error
	}
	return nil
}

type ImageFeatureVector struct {
	Vector []float32 `protobuf:"fixed32,1,rep,packed,name=vector" json:"vector,omitempty"`
}

func (m *ImageFeatureVector) Reset()                    { *m = ImageFeatureVector{} }
func (m *ImageFeatureVector) String() string            { return proto.CompactTextString(m) }
func (*ImageFeatureVector) ProtoMessage()               {}
func (*ImageFeatureVector) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ImageFeatureVector) GetVector() []float32 {
	if m != nil {
		return m.Vector
	}
	return nil
}

type ItemAnnotation struct {
	Label      string       `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
	Bbox       *BoundingBox `protobuf:"bytes,2,opt,name=bbox" json:"bbox,omitempty"`
	Confidence float32      `protobuf:"fixed32,3,opt,name=confidence" json:"confidence,omitempty"`
}

func (m *ItemAnnotation) Reset()                    { *m = ItemAnnotation{} }
func (m *ItemAnnotation) String() string            { return proto.CompactTextString(m) }
func (*ItemAnnotation) ProtoMessage()               {}
func (*ItemAnnotation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ItemAnnotation) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *ItemAnnotation) GetBbox() *BoundingBox {
	if m != nil {
		return m.Bbox
	}
	return nil
}

func (m *ItemAnnotation) GetConfidence() float32 {
	if m != nil {
		return m.Confidence
	}
	return 0
}

type CategoryAnnotation struct {
	Label      string  `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
	Confidence float32 `protobuf:"fixed32,2,opt,name=confidence" json:"confidence,omitempty"`
}

func (m *CategoryAnnotation) Reset()                    { *m = CategoryAnnotation{} }
func (m *CategoryAnnotation) String() string            { return proto.CompactTextString(m) }
func (*CategoryAnnotation) ProtoMessage()               {}
func (*CategoryAnnotation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CategoryAnnotation) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *CategoryAnnotation) GetConfidence() float32 {
	if m != nil {
		return m.Confidence
	}
	return 0
}

type ColorAnnotation struct {
	Label  string    `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
	Center []float32 `protobuf:"fixed32,2,rep,packed,name=center" json:"center,omitempty"`
}

func (m *ColorAnnotation) Reset()                    { *m = ColorAnnotation{} }
func (m *ColorAnnotation) String() string            { return proto.CompactTextString(m) }
func (*ColorAnnotation) ProtoMessage()               {}
func (*ColorAnnotation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ColorAnnotation) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *ColorAnnotation) GetCenter() []float32 {
	if m != nil {
		return m.Center
	}
	return nil
}

type IsFashionAnnotation struct {
	Label      string  `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
	Confidence float32 `protobuf:"fixed32,2,opt,name=confidence" json:"confidence,omitempty"`
}

func (m *IsFashionAnnotation) Reset()                    { *m = IsFashionAnnotation{} }
func (m *IsFashionAnnotation) String() string            { return proto.CompactTextString(m) }
func (*IsFashionAnnotation) ProtoMessage()               {}
func (*IsFashionAnnotation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *IsFashionAnnotation) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *IsFashionAnnotation) GetConfidence() float32 {
	if m != nil {
		return m.Confidence
	}
	return 0
}

type HasFaceAnnotation struct {
	Label      string  `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
	Confidence float32 `protobuf:"fixed32,2,opt,name=confidence" json:"confidence,omitempty"`
}

func (m *HasFaceAnnotation) Reset()                    { *m = HasFaceAnnotation{} }
func (m *HasFaceAnnotation) String() string            { return proto.CompactTextString(m) }
func (*HasFaceAnnotation) ProtoMessage()               {}
func (*HasFaceAnnotation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *HasFaceAnnotation) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *HasFaceAnnotation) GetConfidence() float32 {
	if m != nil {
		return m.Confidence
	}
	return 0
}

type TextureAnnotation struct {
	Label      string  `protobuf:"bytes,1,opt,name=label" json:"label,omitempty"`
	Confidence float32 `protobuf:"fixed32,2,opt,name=confidence" json:"confidence,omitempty"`
}

func (m *TextureAnnotation) Reset()                    { *m = TextureAnnotation{} }
func (m *TextureAnnotation) String() string            { return proto.CompactTextString(m) }
func (*TextureAnnotation) ProtoMessage()               {}
func (*TextureAnnotation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *TextureAnnotation) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *TextureAnnotation) GetConfidence() float32 {
	if m != nil {
		return m.Confidence
	}
	return 0
}

type BoundingBox struct {
	XMin int32 `protobuf:"varint,1,opt,name=x_min,json=xMin" json:"x_min,omitempty"`
	YMin int32 `protobuf:"varint,2,opt,name=y_min,json=yMin" json:"y_min,omitempty"`
	XMax int32 `protobuf:"varint,3,opt,name=x_max,json=xMax" json:"x_max,omitempty"`
	YMax int32 `protobuf:"varint,4,opt,name=y_max,json=yMax" json:"y_max,omitempty"`
}

func (m *BoundingBox) Reset()                    { *m = BoundingBox{} }
func (m *BoundingBox) String() string            { return proto.CompactTextString(m) }
func (*BoundingBox) ProtoMessage()               {}
func (*BoundingBox) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *BoundingBox) GetXMin() int32 {
	if m != nil {
		return m.XMin
	}
	return 0
}

func (m *BoundingBox) GetYMin() int32 {
	if m != nil {
		return m.YMin
	}
	return 0
}

func (m *BoundingBox) GetXMax() int32 {
	if m != nil {
		return m.XMax
	}
	return 0
}

func (m *BoundingBox) GetYMax() int32 {
	if m != nil {
		return m.YMax
	}
	return 0
}

type BatchAnnotateTextsRequest struct {
	Requests []*AnnotateTextRequest `protobuf:"bytes,1,rep,name=requests" json:"requests,omitempty"`
}

func (m *BatchAnnotateTextsRequest) Reset()                    { *m = BatchAnnotateTextsRequest{} }
func (m *BatchAnnotateTextsRequest) String() string            { return proto.CompactTextString(m) }
func (*BatchAnnotateTextsRequest) ProtoMessage()               {}
func (*BatchAnnotateTextsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *BatchAnnotateTextsRequest) GetRequests() []*AnnotateTextRequest {
	if m != nil {
		return m.Requests
	}
	return nil
}

type AnnotateTextRequest struct {
	Text     string         `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	Features []*TextFeature `protobuf:"bytes,2,rep,name=features" json:"features,omitempty"`
}

func (m *AnnotateTextRequest) Reset()                    { *m = AnnotateTextRequest{} }
func (m *AnnotateTextRequest) String() string            { return proto.CompactTextString(m) }
func (*AnnotateTextRequest) ProtoMessage()               {}
func (*AnnotateTextRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *AnnotateTextRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *AnnotateTextRequest) GetFeatures() []*TextFeature {
	if m != nil {
		return m.Features
	}
	return nil
}

type TextFeature struct {
	Type       TextFeature_Type `protobuf:"varint,1,opt,name=type,enum=annotation.TextFeature_Type" json:"type,omitempty"`
	MaxResults int32            `protobuf:"varint,2,opt,name=max_results,json=maxResults" json:"max_results,omitempty"`
}

func (m *TextFeature) Reset()                    { *m = TextFeature{} }
func (m *TextFeature) String() string            { return proto.CompactTextString(m) }
func (*TextFeature) ProtoMessage()               {}
func (*TextFeature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *TextFeature) GetType() TextFeature_Type {
	if m != nil {
		return m.Type
	}
	return TextFeature_TYPE_UNSPECIFIED
}

func (m *TextFeature) GetMaxResults() int32 {
	if m != nil {
		return m.MaxResults
	}
	return 0
}

type BatchAnnotateTextsResponse struct {
	Responses []*AnnotateTextResponse `protobuf:"bytes,1,rep,name=responses" json:"responses,omitempty"`
}

func (m *BatchAnnotateTextsResponse) Reset()                    { *m = BatchAnnotateTextsResponse{} }
func (m *BatchAnnotateTextsResponse) String() string            { return proto.CompactTextString(m) }
func (*BatchAnnotateTextsResponse) ProtoMessage()               {}
func (*BatchAnnotateTextsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *BatchAnnotateTextsResponse) GetResponses() []*AnnotateTextResponse {
	if m != nil {
		return m.Responses
	}
	return nil
}

type AnnotateTextResponse struct {
	EntityAnnotations    []*EntityAnnotation   `protobuf:"bytes,1,rep,name=entity_annotations,json=entityAnnotations" json:"entity_annotations,omitempty"`
	PriceRangeAnnotation *PriceRangeAnnotation `protobuf:"bytes,2,opt,name=price_range_annotation,json=priceRangeAnnotation" json:"price_range_annotation,omitempty"`
	Error                *Status               `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (m *AnnotateTextResponse) Reset()                    { *m = AnnotateTextResponse{} }
func (m *AnnotateTextResponse) String() string            { return proto.CompactTextString(m) }
func (*AnnotateTextResponse) ProtoMessage()               {}
func (*AnnotateTextResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *AnnotateTextResponse) GetEntityAnnotations() []*EntityAnnotation {
	if m != nil {
		return m.EntityAnnotations
	}
	return nil
}

func (m *AnnotateTextResponse) GetPriceRangeAnnotation() *PriceRangeAnnotation {
	if m != nil {
		return m.PriceRangeAnnotation
	}
	return nil
}

func (m *AnnotateTextResponse) GetError() *Status {
	if m != nil {
		return m.Error
	}
	return nil
}

type EntityAnnotation struct {
	Id         string            `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Cls        string            `protobuf:"bytes,2,opt,name=cls" json:"cls,omitempty"`
	Label      string            `protobuf:"bytes,3,opt,name=label" json:"label,omitempty"`
	Start      int32             `protobuf:"varint,4,opt,name=start" json:"start,omitempty"`
	End        int32             `protobuf:"varint,5,opt,name=end" json:"end,omitempty"`
	Original   string            `protobuf:"bytes,6,opt,name=original" json:"original,omitempty"`
	Confidence float32           `protobuf:"fixed32,7,opt,name=confidence" json:"confidence,omitempty"`
	Relations  []*EntityRelation `protobuf:"bytes,8,rep,name=relations" json:"relations,omitempty"`
}

func (m *EntityAnnotation) Reset()                    { *m = EntityAnnotation{} }
func (m *EntityAnnotation) String() string            { return proto.CompactTextString(m) }
func (*EntityAnnotation) ProtoMessage()               {}
func (*EntityAnnotation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *EntityAnnotation) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *EntityAnnotation) GetCls() string {
	if m != nil {
		return m.Cls
	}
	return ""
}

func (m *EntityAnnotation) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *EntityAnnotation) GetStart() int32 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *EntityAnnotation) GetEnd() int32 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *EntityAnnotation) GetOriginal() string {
	if m != nil {
		return m.Original
	}
	return ""
}

func (m *EntityAnnotation) GetConfidence() float32 {
	if m != nil {
		return m.Confidence
	}
	return 0
}

func (m *EntityAnnotation) GetRelations() []*EntityRelation {
	if m != nil {
		return m.Relations
	}
	return nil
}

type PriceRangeAnnotation struct {
	Currency         string             `protobuf:"bytes,1,opt,name=currency" json:"currency,omitempty"`
	RangeAnnotations []*RangeAnnotation `protobuf:"bytes,2,rep,name=range_annotations,json=rangeAnnotations" json:"range_annotations,omitempty"`
}

func (m *PriceRangeAnnotation) Reset()                    { *m = PriceRangeAnnotation{} }
func (m *PriceRangeAnnotation) String() string            { return proto.CompactTextString(m) }
func (*PriceRangeAnnotation) ProtoMessage()               {}
func (*PriceRangeAnnotation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *PriceRangeAnnotation) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *PriceRangeAnnotation) GetRangeAnnotations() []*RangeAnnotation {
	if m != nil {
		return m.RangeAnnotations
	}
	return nil
}

type RangeAnnotation struct {
	Operator RangeAnnotation_RangeOperator `protobuf:"varint,1,opt,name=operator,enum=annotation.RangeAnnotation_RangeOperator" json:"operator,omitempty"`
	Value    int32                         `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
}

func (m *RangeAnnotation) Reset()                    { *m = RangeAnnotation{} }
func (m *RangeAnnotation) String() string            { return proto.CompactTextString(m) }
func (*RangeAnnotation) ProtoMessage()               {}
func (*RangeAnnotation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *RangeAnnotation) GetOperator() RangeAnnotation_RangeOperator {
	if m != nil {
		return m.Operator
	}
	return RangeAnnotation_OP_UNSPECIFIED
}

func (m *RangeAnnotation) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type EntityRelation struct {
	Name   string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Target string `protobuf:"bytes,2,opt,name=target" json:"target,omitempty"`
}

func (m *EntityRelation) Reset()                    { *m = EntityRelation{} }
func (m *EntityRelation) String() string            { return proto.CompactTextString(m) }
func (*EntityRelation) ProtoMessage()               {}
func (*EntityRelation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *EntityRelation) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EntityRelation) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

type Status struct {
	Code    int32                  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message string                 `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Details []*google_protobuf.Any `protobuf:"bytes,3,rep,name=details" json:"details,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *Status) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Status) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Status) GetDetails() []*google_protobuf.Any {
	if m != nil {
		return m.Details
	}
	return nil
}

func init() {
	proto.RegisterType((*BatchAnnotateImagesRequest)(nil), "annotation.BatchAnnotateImagesRequest")
	proto.RegisterType((*AnnotateImageRequest)(nil), "annotation.AnnotateImageRequest")
	proto.RegisterType((*Image)(nil), "annotation.Image")
	proto.RegisterType((*ImageSource)(nil), "annotation.ImageSource")
	proto.RegisterType((*ImageFeature)(nil), "annotation.ImageFeature")
	proto.RegisterType((*BatchAnnotateImagesResponse)(nil), "annotation.BatchAnnotateImagesResponse")
	proto.RegisterType((*AnnotateImageResponse)(nil), "annotation.AnnotateImageResponse")
	proto.RegisterType((*ImageFeatureVector)(nil), "annotation.ImageFeatureVector")
	proto.RegisterType((*ItemAnnotation)(nil), "annotation.ItemAnnotation")
	proto.RegisterType((*CategoryAnnotation)(nil), "annotation.CategoryAnnotation")
	proto.RegisterType((*ColorAnnotation)(nil), "annotation.ColorAnnotation")
	proto.RegisterType((*IsFashionAnnotation)(nil), "annotation.IsFashionAnnotation")
	proto.RegisterType((*HasFaceAnnotation)(nil), "annotation.HasFaceAnnotation")
	proto.RegisterType((*TextureAnnotation)(nil), "annotation.TextureAnnotation")
	proto.RegisterType((*BoundingBox)(nil), "annotation.BoundingBox")
	proto.RegisterType((*BatchAnnotateTextsRequest)(nil), "annotation.BatchAnnotateTextsRequest")
	proto.RegisterType((*AnnotateTextRequest)(nil), "annotation.AnnotateTextRequest")
	proto.RegisterType((*TextFeature)(nil), "annotation.TextFeature")
	proto.RegisterType((*BatchAnnotateTextsResponse)(nil), "annotation.BatchAnnotateTextsResponse")
	proto.RegisterType((*AnnotateTextResponse)(nil), "annotation.AnnotateTextResponse")
	proto.RegisterType((*EntityAnnotation)(nil), "annotation.EntityAnnotation")
	proto.RegisterType((*PriceRangeAnnotation)(nil), "annotation.PriceRangeAnnotation")
	proto.RegisterType((*RangeAnnotation)(nil), "annotation.RangeAnnotation")
	proto.RegisterType((*EntityRelation)(nil), "annotation.EntityRelation")
	proto.RegisterType((*Status)(nil), "annotation.Status")
	proto.RegisterEnum("annotation.ImageFeature_Type", ImageFeature_Type_name, ImageFeature_Type_value)
	proto.RegisterEnum("annotation.TextFeature_Type", TextFeature_Type_name, TextFeature_Type_value)
	proto.RegisterEnum("annotation.RangeAnnotation_RangeOperator", RangeAnnotation_RangeOperator_name, RangeAnnotation_RangeOperator_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Annotator service

type AnnotatorClient interface {
	BatchAnnotateTexts(ctx context.Context, in *BatchAnnotateTextsRequest, opts ...grpc.CallOption) (*BatchAnnotateTextsResponse, error)
	BatchAnnotateImages(ctx context.Context, in *BatchAnnotateImagesRequest, opts ...grpc.CallOption) (*BatchAnnotateImagesResponse, error)
}

type annotatorClient struct {
	cc *grpc.ClientConn
}

func NewAnnotatorClient(cc *grpc.ClientConn) AnnotatorClient {
	return &annotatorClient{cc}
}

func (c *annotatorClient) BatchAnnotateTexts(ctx context.Context, in *BatchAnnotateTextsRequest, opts ...grpc.CallOption) (*BatchAnnotateTextsResponse, error) {
	out := new(BatchAnnotateTextsResponse)
	err := grpc.Invoke(ctx, "/annotation.Annotator/BatchAnnotateTexts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *annotatorClient) BatchAnnotateImages(ctx context.Context, in *BatchAnnotateImagesRequest, opts ...grpc.CallOption) (*BatchAnnotateImagesResponse, error) {
	out := new(BatchAnnotateImagesResponse)
	err := grpc.Invoke(ctx, "/annotation.Annotator/BatchAnnotateImages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Annotator service

type AnnotatorServer interface {
	BatchAnnotateTexts(context.Context, *BatchAnnotateTextsRequest) (*BatchAnnotateTextsResponse, error)
	BatchAnnotateImages(context.Context, *BatchAnnotateImagesRequest) (*BatchAnnotateImagesResponse, error)
}

func RegisterAnnotatorServer(s *grpc.Server, srv AnnotatorServer) {
	s.RegisterService(&_Annotator_serviceDesc, srv)
}

func _Annotator_BatchAnnotateTexts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchAnnotateTextsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnotatorServer).BatchAnnotateTexts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/annotation.Annotator/BatchAnnotateTexts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnotatorServer).BatchAnnotateTexts(ctx, req.(*BatchAnnotateTextsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Annotator_BatchAnnotateImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchAnnotateImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnotatorServer).BatchAnnotateImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/annotation.Annotator/BatchAnnotateImages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnotatorServer).BatchAnnotateImages(ctx, req.(*BatchAnnotateImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Annotator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "annotation.Annotator",
	HandlerType: (*AnnotatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BatchAnnotateTexts",
			Handler:    _Annotator_BatchAnnotateTexts_Handler,
		},
		{
			MethodName: "BatchAnnotateImages",
			Handler:    _Annotator_BatchAnnotateImages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "annotation.proto",
}

func init() { proto.RegisterFile("annotation.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1326 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x57, 0xdd, 0x6e, 0xdb, 0xb6,
	0x17, 0xaf, 0x3f, 0xe3, 0x9c, 0xb4, 0x8e, 0x72, 0xec, 0xa4, 0x6e, 0xfa, 0xff, 0xb7, 0x99, 0x80,
	0xad, 0xd9, 0x07, 0xdc, 0x2d, 0xdd, 0xc5, 0x80, 0x75, 0x2b, 0x5c, 0x57, 0x69, 0xbc, 0xb6, 0x71,
	0x4a, 0xab, 0x45, 0x3b, 0x0c, 0x15, 0x18, 0x99, 0x71, 0x04, 0xd8, 0x92, 0x27, 0xc9, 0x85, 0x0d,
	0xec, 0x6d, 0x76, 0xbd, 0x57, 0xd8, 0xe5, 0x9e, 0x62, 0x17, 0xbb, 0x19, 0xb0, 0xc7, 0x18, 0x48,
	0x4a, 0x36, 0x69, 0xd9, 0x2d, 0xd6, 0x3b, 0x9e, 0xc3, 0xdf, 0xf9, 0xf1, 0x90, 0x3c, 0x1f, 0x24,
	0x18, 0xd4, 0xf7, 0x83, 0x98, 0xc6, 0x5e, 0xe0, 0x37, 0xc7, 0x61, 0x10, 0x07, 0x08, 0x0b, 0xcd,
	0xfe, 0x8d, 0x41, 0x10, 0x0c, 0x86, 0xec, 0xae, 0x98, 0x39, 0x9f, 0x5c, 0xdc, 0xa5, 0xfe, 0x4c,
	0xc2, 0xcc, 0x1f, 0x61, 0xff, 0x21, 0x8d, 0xdd, 0xcb, 0x96, 0x44, 0xb3, 0xce, 0x88, 0x0e, 0x58,
	0x44, 0xd8, 0xcf, 0x13, 0x16, 0xc5, 0x78, 0x1f, 0x2a, 0xa1, 0x1c, 0x46, 0x8d, 0xdc, 0x41, 0xe1,
	0x70, 0xeb, 0xe8, 0xa0, 0xa9, 0xac, 0xa4, 0x19, 0x25, 0x36, 0x64, 0x6e, 0x61, 0x4e, 0xa0, 0xbe,
	0x0a, 0x81, 0x77, 0xa0, 0xe4, 0x71, 0xb9, 0x91, 0x3b, 0xc8, 0x1d, 0x6e, 0x1d, 0xed, 0xa8, 0x94,
	0x12, 0x28, 0xe7, 0xf1, 0x6b, 0xa8, 0x5c, 0x30, 0x1a, 0x4f, 0x42, 0x16, 0x35, 0xf2, 0x62, 0xf9,
	0x46, 0x06, 0x7b, 0x2c, 0x01, 0x64, 0x8e, 0x34, 0x09, 0x94, 0xc4, 0x0c, 0x36, 0x60, 0xc3, 0x0d,
	0xfc, 0x98, 0xf9, 0xb1, 0x58, 0xe9, 0x2a, 0x49, 0x45, 0xbc, 0x0b, 0xe5, 0x28, 0x98, 0x84, 0x2e,
	0x6b, 0xe4, 0x85, 0x0b, 0xd7, 0x33, 0xb4, 0x3d, 0x31, 0x4d, 0x12, 0x98, 0xf9, 0x19, 0x6c, 0x29,
	0x6a, 0xbc, 0x09, 0x9b, 0xc2, 0x43, 0x67, 0x12, 0x0e, 0x05, 0xf7, 0x26, 0xa9, 0x08, 0xc5, 0x8b,
	0x70, 0x68, 0xfe, 0x9a, 0x87, 0xab, 0xaa, 0x6b, 0xf8, 0x15, 0x14, 0xe3, 0xd9, 0x58, 0x6e, 0xb7,
	0x7a, 0xf4, 0xff, 0x75, 0x5b, 0x68, 0xda, 0xb3, 0x31, 0x23, 0x02, 0x8a, 0xb7, 0x61, 0x6b, 0x44,
	0xa7, 0x4e, 0xc8, 0xa2, 0xc9, 0x30, 0x8e, 0x84, 0x97, 0x25, 0x02, 0x23, 0x3a, 0x25, 0x52, 0x63,
	0xfe, 0x9e, 0x83, 0x22, 0xc7, 0x63, 0x1d, 0x0c, 0xfb, 0xf5, 0x99, 0xe5, 0xbc, 0x38, 0xed, 0x9d,
	0x59, 0xed, 0xce, 0x71, 0xc7, 0x7a, 0x64, 0x5c, 0x41, 0x84, 0xea, 0xb1, 0xd5, 0xb2, 0x5f, 0x10,
	0xcb, 0x79, 0x69, 0xb5, 0xed, 0x2e, 0x31, 0x72, 0x5c, 0xd7, 0xb1, 0xad, 0x67, 0xce, 0x23, 0xcb,
	0xb6, 0xda, 0x76, 0xa7, 0x7b, 0x6a, 0xe4, 0xf1, 0x3a, 0xd4, 0xda, 0x2d, 0xdb, 0x7a, 0xdc, 0x25,
	0xaf, 0x9d, 0x33, 0x62, 0x3d, 0xea, 0xc8, 0x89, 0x02, 0xd6, 0x60, 0xbb, 0xdd, 0x7d, 0xda, 0x25,
	0x0a, 0xba, 0x88, 0x37, 0x60, 0xb7, 0xd3, 0x73, 0x8e, 0x5b, 0xbd, 0x93, 0x4e, 0xf7, 0x54, 0xc5,
	0x97, 0x38, 0xd1, 0x49, 0x8b, 0xcf, 0xb5, 0x2d, 0x75, 0xa2, 0x8c, 0x7b, 0x80, 0xb6, 0xf5, 0x4a,
	0x78, 0xa2, 0xe8, 0x37, 0xcc, 0x37, 0x70, 0x73, 0x65, 0xe0, 0x45, 0xe3, 0xc0, 0x8f, 0x18, 0x3e,
	0x80, 0xcd, 0x30, 0x19, 0xa7, 0xa1, 0xf7, 0xd1, 0x3b, 0x42, 0x4f, 0x22, 0xc9, 0xc2, 0xc6, 0xfc,
	0xab, 0x08, 0xbb, 0x2b, 0x41, 0x68, 0x41, 0x35, 0x89, 0x15, 0xe7, 0x2d, 0x73, 0xe3, 0x20, 0x4c,
	0xe2, 0xf0, 0xd6, 0xba, 0x8b, 0x79, 0x29, 0x50, 0xe4, 0xda, 0x85, 0x2a, 0xa2, 0x05, 0x86, 0x17,
	0xb3, 0x91, 0xb3, 0x30, 0x4a, 0x83, 0x74, 0x5f, 0x23, 0x8a, 0xd9, 0xa8, 0x35, 0x17, 0xc9, 0xb6,
	0xa7, 0xc9, 0x11, 0x3e, 0x87, 0xba, 0x4b, 0x63, 0x36, 0x08, 0xc2, 0x99, 0x46, 0x55, 0x10, 0x54,
	0x9a, 0x4f, 0xed, 0x04, 0xa7, 0xd0, 0xd5, 0xdc, 0x8c, 0x2e, 0xc2, 0x13, 0xd8, 0x71, 0x83, 0x61,
	0x10, 0x6a, 0x7c, 0x45, 0xc1, 0x77, 0x53, 0xe3, 0xe3, 0x20, 0x85, 0xcc, 0x70, 0x75, 0x45, 0x84,
	0x3d, 0xd8, 0xf5, 0x22, 0xe7, 0x82, 0x46, 0x97, 0x5e, 0xe0, 0x2b, 0x74, 0x8d, 0x92, 0x38, 0xb1,
	0xdb, 0xda, 0x46, 0xa3, 0x63, 0x89, 0x53, 0xdd, 0xf3, 0xb2, 0x4a, 0x7c, 0x06, 0xb5, 0x4b, 0xca,
	0x59, 0x5d, 0xa6, 0x52, 0x96, 0x05, 0xa5, 0x96, 0x1d, 0x27, 0x34, 0x3a, 0xa6, 0x2e, 0x53, 0x08,
	0x77, 0x2e, 0x97, 0x55, 0x78, 0x0a, 0xb5, 0x98, 0x4d, 0xc5, 0x75, 0xaa, 0xfb, 0xdd, 0x10, 0xfb,
	0xd5, 0xe8, 0x6c, 0x09, 0x53, 0xe8, 0x30, 0x5e, 0x56, 0x45, 0x78, 0x08, 0x25, 0x16, 0x86, 0x41,
	0xd8, 0xa8, 0x08, 0x87, 0x50, 0x65, 0xe8, 0xc5, 0x34, 0x9e, 0x44, 0x44, 0x02, 0xcc, 0x2f, 0x00,
	0xb3, 0x61, 0x82, 0x7b, 0x50, 0x9e, 0x87, 0x55, 0xe1, 0x30, 0x4f, 0x12, 0xc9, 0x8c, 0xa0, 0xaa,
	0xc7, 0x02, 0xd6, 0xa1, 0x34, 0xa4, 0xe7, 0x2c, 0xad, 0x20, 0x52, 0xc0, 0xcf, 0xa1, 0x78, 0x7e,
	0x1e, 0x4c, 0x57, 0x55, 0xa6, 0x87, 0xc1, 0xc4, 0xef, 0x7b, 0xfe, 0xe0, 0x61, 0x30, 0x25, 0x02,
	0x84, 0xb7, 0x00, 0xdc, 0xc0, 0xbf, 0xf0, 0xfa, 0xcc, 0x77, 0x59, 0xa3, 0x70, 0x90, 0x3b, 0xcc,
	0x13, 0x45, 0x63, 0xfe, 0x00, 0x98, 0x8d, 0x9a, 0x35, 0x0b, 0xeb, 0x5c, 0xf9, 0x0c, 0xd7, 0x03,
	0xd8, 0x5e, 0x8a, 0x98, 0x35, 0x44, 0x7b, 0x50, 0x76, 0x99, 0x1f, 0xb3, 0x50, 0xe4, 0x43, 0x9e,
	0x24, 0x92, 0xf9, 0x04, 0x6a, 0x2b, 0x82, 0xe4, 0x03, 0xbd, 0xe9, 0xc0, 0x4e, 0x26, 0x3c, 0x3e,
	0x9c, 0x2a, 0x13, 0x1a, 0x1f, 0x48, 0x45, 0x61, 0x4b, 0xb9, 0x24, 0xac, 0x41, 0x69, 0xea, 0x8c,
	0x3c, 0x5f, 0x90, 0x94, 0x48, 0x71, 0xfa, 0xcc, 0xf3, 0xb9, 0x72, 0x26, 0x94, 0xb2, 0xaa, 0x17,
	0x67, 0x89, 0x72, 0xea, 0x8c, 0xe8, 0x54, 0xdc, 0xa1, 0x40, 0xd2, 0x69, 0x82, 0xa4, 0xd3, 0x46,
	0x31, 0x45, 0xd2, 0xa9, 0xf9, 0x0a, 0x6e, 0x68, 0x85, 0x93, 0xbb, 0x3e, 0x6f, 0xd8, 0xdf, 0x66,
	0x1a, 0xf6, 0xed, 0x55, 0x55, 0x93, 0xdb, 0x64, 0xfb, 0xf5, 0x1b, 0xa8, 0xad, 0x00, 0x20, 0x42,
	0x91, 0xa7, 0x49, 0x72, 0x10, 0x62, 0x8c, 0xf7, 0x32, 0x9d, 0xf9, 0xfa, 0x72, 0xa6, 0x65, 0x1b,
	0xf3, 0x1f, 0x39, 0xd8, 0x52, 0x66, 0xf0, 0x4b, 0xad, 0x2f, 0xfe, 0x6f, 0x0d, 0xc1, 0x7f, 0x6a,
	0x8b, 0xfd, 0x77, 0x76, 0xc5, 0x5d, 0xd8, 0xb1, 0x4e, 0xed, 0x8e, 0xad, 0xf5, 0xba, 0x1c, 0x07,
	0x27, 0x6a, 0x62, 0x3d, 0x6d, 0x71, 0x65, 0xcf, 0xc8, 0xf3, 0x66, 0x77, 0x46, 0x3a, 0x6d, 0xcb,
	0x21, 0xad, 0xd3, 0xc7, 0x96, 0xd2, 0x07, 0x0b, 0xe6, 0x4f, 0x4b, 0x8f, 0xa6, 0xe4, 0x0a, 0x92,
	0xfe, 0xf2, 0x7d, 0xb6, 0x75, 0x1d, 0xac, 0xbf, 0x84, 0x6c, 0xe7, 0xfa, 0x3b, 0xb7, 0x78, 0x37,
	0xa9, 0x18, 0x7c, 0x02, 0xc8, 0xfc, 0xd8, 0x8b, 0xf5, 0x46, 0x21, 0x57, 0xd0, 0x4e, 0xcf, 0x12,
	0x28, 0xb5, 0x6c, 0xb2, 0x25, 0x4d, 0x84, 0x2f, 0x61, 0x6f, 0x1c, 0x7a, 0x2e, 0x73, 0x42, 0xea,
	0x0f, 0xb4, 0x42, 0x2c, 0x0b, 0x8f, 0xe6, 0xf2, 0x19, 0x47, 0x12, 0x0e, 0x54, 0x48, 0xeb, 0xe3,
	0x15, 0xda, 0x45, 0xf9, 0x2c, 0xbc, 0xaf, 0x7c, 0xfe, 0x93, 0x03, 0x63, 0xd9, 0x53, 0xac, 0x42,
	0xde, 0xeb, 0x27, 0xa1, 0x96, 0xf7, 0xfa, 0x68, 0x40, 0xc1, 0x1d, 0xca, 0x9b, 0xde, 0x24, 0x7c,
	0xb8, 0x48, 0xcc, 0x82, 0x9a, 0x98, 0x75, 0x28, 0x45, 0x31, 0x0d, 0xe3, 0x24, 0x55, 0xa4, 0xc0,
	0xad, 0x99, 0xdf, 0x17, 0xdd, 0xaa, 0x44, 0xf8, 0x10, 0xf7, 0xa1, 0x12, 0x84, 0xde, 0xc0, 0xf3,
	0xe9, 0x50, 0x74, 0x9c, 0x4d, 0x32, 0x97, 0x97, 0x92, 0x7b, 0x63, 0x39, 0xb9, 0xf1, 0x1b, 0x7e,
	0xb1, 0xc3, 0xe4, 0xd8, 0x2b, 0xd9, 0x56, 0x2f, 0x37, 0x43, 0x12, 0x08, 0x59, 0x80, 0xcd, 0x5f,
	0xa0, 0xbe, 0xea, 0x08, 0xb9, 0x37, 0xee, 0x24, 0x0c, 0x99, 0xef, 0xce, 0xd2, 0x67, 0x64, 0x2a,
	0xf3, 0x2e, 0xbe, 0x7c, 0x35, 0x69, 0xae, 0x69, 0x5d, 0x7c, 0xf9, 0x5a, 0x8c, 0x50, 0x57, 0x44,
	0xe6, 0x6f, 0x39, 0xd8, 0x5e, 0x5e, 0xd9, 0x82, 0x4a, 0x30, 0x66, 0x21, 0x4d, 0x9f, 0x3f, 0xd5,
	0xa3, 0x4f, 0xdf, 0x41, 0x2a, 0xe5, 0x6e, 0x62, 0x40, 0xe6, 0xa6, 0xfc, 0xd8, 0xdf, 0xd2, 0xe1,
	0x84, 0x25, 0xa9, 0x28, 0x05, 0xf3, 0x3b, 0xb8, 0xa6, 0x19, 0xf0, 0xa7, 0x67, 0xf7, 0x6c, 0x29,
	0x19, 0x37, 0xa0, 0xf0, 0xd8, 0xb6, 0x8c, 0x1c, 0x1f, 0x3c, 0xb5, 0x2d, 0x23, 0x8f, 0x65, 0xc8,
	0x5b, 0xcf, 0x8d, 0x82, 0x79, 0x1f, 0xaa, 0xfa, 0x51, 0xf2, 0x12, 0xe4, 0xd3, 0x11, 0x4b, 0x4b,
	0x10, 0x1f, 0xf3, 0x2e, 0x13, 0xd3, 0x70, 0xc0, 0xe2, 0x24, 0x38, 0x12, 0xc9, 0xbc, 0x80, 0xb2,
	0x8c, 0x33, 0x6e, 0xe5, 0x06, 0x7d, 0x96, 0x16, 0x5f, 0x3e, 0xe6, 0x7f, 0x82, 0x11, 0x8b, 0x22,
	0xfe, 0xfb, 0x90, 0x66, 0xa9, 0x88, 0x4d, 0xd8, 0xe8, 0xb3, 0x98, 0x7a, 0xc3, 0xf4, 0xed, 0x55,
	0x6f, 0xca, 0x6f, 0x53, 0x33, 0xfd, 0x36, 0x35, 0x5b, 0xfe, 0x8c, 0xa4, 0xa0, 0xa3, 0x3f, 0x73,
	0xb0, 0x99, 0x9c, 0x50, 0x10, 0x22, 0x03, 0xcc, 0x96, 0x04, 0xfc, 0x58, 0xeb, 0xde, 0xeb, 0xaa,
	0xf6, 0xfe, 0x27, 0xef, 0x83, 0xc9, 0x02, 0x60, 0x5e, 0xc1, 0x4b, 0xa8, 0xad, 0x78, 0x35, 0xe3,
	0x7a, 0x02, 0xed, 0x3f, 0xb7, 0x7f, 0xe7, 0xbd, 0xb8, 0x74, 0xa5, 0xf3, 0xb2, 0xd8, 0xf5, 0xbd,
	0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x17, 0x66, 0xa8, 0xd3, 0x5a, 0x0e, 0x00, 0x00,
}
