'use strict';
var https = require('https');
const querystring = require('querystring');

module.exports = class Cerebel {
  constructor(token) {
    this.token = token;
  }

  search(query, gender, size = 5) {
    return new Promise((resolve, reject) => {
      let endpoint = "/store/faer/search/text";
      let requestMethod = "POST";

      let requestBody = {
        "query": {
          "content": query
        },
        "size": size,
        "offset": 0,
        "config": {
          "filters": {
            "gender": {
              "type": "term",
              "value": gender
            }
          }
        }
      };
      performRequest(endpoint, requestMethod, this.token, requestBody).then((data) => {
        resolve(data);
      }).catch((error) => {
        reject(error)
      });
    });
  };

  freshLooks(gender, size = 5) {
    return new Promise((resolve, reject) => {
      let endpoint = "/store/faer/feed";
      let requestMethod = "GET";

      let requestQuery = {
        "gender": gender,
        "size": size,
      };
      performRequest(endpoint, requestMethod, this.token, requestQuery).then((data) => {
        resolve(data);
      }).catch((error) => {
        reject(error)
      });
    });
  };

  product(id) {
    return new Promise((resolve, reject) => {
      let endpoint = "/store/faer/item/" + id;
      let requestMethod = "GET";

      performRequest(endpoint, requestMethod, this.token).then((data) => {
        resolve(data);
      }).catch((error) => {
        reject(error)
      });
    });
  };
};

// Private methods

function performRequest(endpoint, method, token, requestBody = null) {
  return new Promise((resolve, reject) => {
    const host = "api.cerebel.io";
    var requestBodySerialized = "";
    var headers = {};
    var options = {
      path: endpoint,
      hostname: host,
      method: method
    };

    if (method == 'GET') {
      var data = requestBody || {};
      data.token = token;
      options.path += '?' + querystring.stringify(data);
    } else {
      requestBodySerialized = JSON.stringify(requestBody);
      options.headers = {
        'Content-Type': 'application/json',
        'Content-Length': requestBodySerialized.length,
        'X-Cerebel-Token': token
      };
    }

    var req = https.request(options, (res) => {

      res.setEncoding('utf-8');
      var responseString = '';

      console.log('statusCode:', res.statusCode);
      console.log('headers:', res.headers);

      res.on('data', (d) => {
        responseString += d;
      });

      res.on('end', function () {
        console.log(responseString);
        var responseObject = JSON.parse(responseString);
        resolve(responseObject);
      });

    });
    req.write(requestBodySerialized);
    req.on('error', (e) => {
      reject(e);
    });
    req.end();
  });
}